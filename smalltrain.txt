import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.applications import EfficientNetB0  # Lighter Model
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os

# ✅ Set Directories
TRAIN_DIR = "path_to_train"
VAL_DIR = "path_to_val"

# ✅ Hyperparameters (Reduced for Quick Testing)
IMAGE_SIZE = (224, 224)
BATCH_SIZE = 16
EPOCHS = 5  # Small training
LEARNING_RATE = 0.0005

# ✅ Data Augmentation (No rotation to speed up processing)
train_datagen = ImageDataGenerator(rescale=1./255, zoom_range=0.1, horizontal_flip=True)
val_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    TRAIN_DIR, target_size=IMAGE_SIZE, batch_size=BATCH_SIZE, class_mode="categorical"
)
val_generator = val_datagen.flow_from_directory(
    VAL_DIR, target_size=IMAGE_SIZE, batch_size=BATCH_SIZE, class_mode="categorical"
)

# ✅ Model Definition (Simpler Model)
base_model = EfficientNetB0(weights="imagenet", include_top=False, input_shape=(224, 224, 3))
x = GlobalAveragePooling2D()(base_model.output)
x = Dropout(0.3)(x)
output = Dense(train_generator.num_classes, activation="softmax", name="output")(x)

model = Model(inputs=base_model.input, outputs=output)

# ✅ Compile Model
model.compile(optimizer=Adam(learning_rate=LEARNING_RATE),
              loss="categorical_crossentropy",
              metrics=["accuracy"])

# ✅ Train Model (Limited Steps Per Epoch for Faster Training)
history = model.fit(
    train_generator, validation_data=val_generator, epochs=EPOCHS, 
    steps_per_epoch=10, validation_steps=5
)

# ✅ Save Model (Fixed issue: Use TensorFlow SavedModel format)
model.save("waste_classification_model_small")

# ✅ Plot Accuracy & Loss Per Epoch
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Training & Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.title('Training & Validation Loss')

plt.show()
